#[allow(unused_macros)]
macro_rules! generate_tests {
    ($($name:ident, $func:ident, $args:expr, $expected:expr);* $(;)?) => {
        $(
            #[test]
            fn $name() {
                let result = $func($args);
                assert_eq!(result, $expected);
            }
        )*
    };
}

pub fn add(left: usize, right: usize) -> usize {
    left + right
}

/// <p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>
/// <p>Find the sum of all the multiples of 3 or 5 below 1000.</p>
pub fn problem_1(max: i32) -> i32 {
    (1..max).filter(|x| x % 3 == 0 || x % 5 == 0).sum()
}

/// <p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>
/// <p class="center">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>
/// <p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>
pub fn problem_2(max: i32) -> i32 {
    let mut n0 = 0;
    let mut n1 = 1;
    let mut n;
    let mut sum = 0;
    loop {
        n = n0 + n1;
        if n > max {
            break;
        }
        if n % 2 == 0 {
            sum += n;
        }
        n0 = n1;
        n1 = n;
    }
    sum
}

/// <p>The prime factors of 13195 are 5, 7, 13 and 29.</p>
/// <p>What is the largest prime factor of the number 600851475143 ?</p>
pub fn problem_3(number: i64) -> i64 {
    let sqrt_number = (number as f64).sqrt() as i64 + 1;

    (1i64..=sqrt_number)
        .rev()
        .filter(|n| number % n == 0 && (2..*n).all(|i| n % i != 0))
        .take(1)
        .sum()
}

/// <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.</p>
/// <p>Find the largest palindrome made from the product of two 3-digit numbers.</p>
pub fn problem_4(no_of_digits: u32) -> i32 {
    fn is_palindrome(number: i32) -> bool {
        let mut num = number;
        let mut rev = 0;

        while num != 0 {
            rev = rev * 10 + num % 10;
            num /= 10;
        }

        rev == number
    }
    let max = i32::pow(10, no_of_digits) - 1;
    let min = i32::pow(10, no_of_digits - 1);
    let mut max_product = 0;

    for i in (min..=max).rev() {
        for j in (min..=i).rev() {
            let prod = i * j;
            if prod <= max_product {
                break;
            }
            if is_palindrome(prod) {
                max_product = prod;
            }
        }
    }

    max_product
}

/// <p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>
/// <p>What is the smallest positive number that is <dfn title="divisible with no remainder">evenly divisible</dfn> by all of the numbers from 1 to 20?</p>
pub fn problem_5(max: i32) -> i32 {
    (max..).find(|i| (2..=max).all(|j| i % j == 0)).unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
        let result = add(2, 2);
        assert_eq!(result, 4);
    }

    generate_tests![
        sum_of_multiples_of_3_or_5_till_10, problem_1, 10, 23;
        sum_of_even_fib_numbers, problem_2, 90, 44;
        largest_prime_factor, problem_3, 13195, 29;
        largest_palindrome_product, problem_4, 2, 9009;
        smallest_multiple, problem_5, 10, 2520;
    ];
}
